// nodeBackbone.js

// This javascript file, along with the other documents that make up this website and database, were generated by David Kaff and Amelia Walsh in CS 340 at Oregon State in the Winter of 2021.

// The following resources were referenced in the creation of this database driven website:

    // expressjs.com
    // CS 290 Coursework
    // CS 340 Coursework
    // bootstrap.com
    // stackoverflow.com
    // eloquentjavascript.net
    // udemy.com
    //amelia is awesome!

         ///////////////////////////////////////////////////////////////
        // in order for this website to run, node must be installed, //
       //     along with the following packages:                    //
      //        express, express-handlebars, express-session,      //
     //         body-parser, and mysql                            //
    ///////////////////////////////////////////////////////////////

//================================================================//

      ///////////////////////////////////////////
     // set up express and other dependencies //
    ///////////////////////////////////////////

const express = require('express');
const app = express();

const handlebars = require('express-handlebars').create({defaultLayout:'main'});

app.engine('handlebars', handlebars.engine);
app.set('view engine', 'handlebars');
app.use('/source', express.static('resources'));

const bodyParser = require('body-parser');
app.use(bodyParser.urlencoded({extended: false}));
app.use(bodyParser.json());

// magic from Millie
const CORS = require('cors');
app.use(CORS());


// const session = require('express-session');
// app.use(session({secret: 'verySecretPassword'}));

const mysql = require('mysql');
const pool = mysql.createPool({
    connectionLimit:    10,
    host:               'classmysql.engr.oregonstate.edu',
    user:               'cs340_kaffs',
    password:           'sP6ptfbWuXAU54w',
    database:           'cs340_kaffs'
});
module.exports.pool = pool;

//================================================================//

      //~~~//////////////////////////////////~~~//
     //    express backbone for node server    //
    //~~~//////////////////////////////////~~~//

const port = 28394;
app.set('port', port);

    /////////////
   // content //
  /////////////

app.get('/', funcHome);

//routes for farmer and planting pages
app.get('/farmer', funcFarmer);
app.get('/farmer-plant-new-row', func_farmer_new_crop_rows);
app.get('/farmer-harvest-new-row', func_farmer_new_harvest);
app.get('/farmer-view-planted-rows', func_farmer_view_rows);
app.get('/farmer-view-produce-on-hand', func_farmer_view_produce);
app.get('/farmer-add-new-crop-type', func_add_new_crop_type)

//routes for box packer
app.get('/box-packer', funcBoxPacker);

//routes for admin page and sub-pages
app.get('/admin', funcAdmin);
app.get('/admin-add-cust',func_add_cust);
app.get('/admin-updt-cust',func_updt_cust);
app.get('/admin-boxes-view',func_boxes_view);

function funcHome(req, res){
    content = {
        title: 'Rubyfruit Farm',
        page_name: 'home'
    };
    res.render('home', content);
}

          //////////////////
//=======// farmer pages //================================//
        //////////////////

function funcFarmer(req, res){
    content = {
        title: 'Rubyfruit Farm – Farmer',
        page_name: 'farmer',
        breadcrumbs: [
            {link: '/', page_name: 'home'}
        ]
    };
    res.render('farmer', content);
}

function func_farmer_new_crop_rows(req, res){
    content = {
        title: 'Rubyfruit Farm – Track Newly Planted Row',
        page_name: 'plant new row',
        breadcrumbs: [
            {link: '/', page_name: 'home'},
            {link: '/farmer', page_name: 'farmer'}
        ]
    };
    // get the crop type names before rendering
    pool.query(
        get_crop_types_query,
        function(err, result){
            // on return:
                // push results into content
                // render farmer-plant-new-row
            content.crop_types = result;
            res.render('farmer-plant-new-row', content);
        }
    )
}

function func_farmer_new_harvest(req, res){
    content = {
        title: 'Rubyfruit Farm – Enter Row Harvested',
        page_name: 'harvest new row',
        breadcrumbs: [
            {link: '/', page_name: 'home'},
            {link: '/farmer', page_name: 'farmer'}
        ]
    };
    // get the crop rows before rendering
    pool.query(
        get_crop_rows_query,
        function(err, result){
            content.crop_rows = result;
            for (i in content.crop_rows) {
                var date = new Date(content.crop_rows[i].mature_date);
                content.crop_rows[i].mature_date = Intl.DateTimeFormat('en-US').format(date);
            }
            res.render('farmer-harvest-new-row', content);
        }
    )
}

function func_farmer_view_rows(req, res){
    content = {
        title: 'Rubyfruit Farm – View Rows',
        page_name: 'view planted rows',
        breadcrumbs: [
            {link: '/', page_name: 'home'},
            {link: '/farmer', page_name: 'farmer'}
        ]
    };
    // get the crop rows before rendering
    pool.query(
        get_crop_rows_query,
        function(err, result){
            // on return:
                // push results into content
                // convert the dates to DateStrings for js
                // render farmer-view-planted-rows
            content.crop_rows = result;
                    // for (r in content.crop_rows) {
                    //     console.log(content.crop_rows[r]);
                    // }
            for (i in content.crop_rows) {
                var date = new Date(content.crop_rows[i].mature_date);
                content.crop_rows[i].mature_date = Intl.DateTimeFormat('en-US').format(date);
            }
            res.render('farmer-view-planted-rows', content);
        }
    )
}

function func_farmer_view_produce(req, res){
    content = {
        title: 'Rubyfruit Farm – View Produce',
        page_name: 'view produce on hand',
        breadcrumbs: [
            {link: '/', page_name: 'home'},
            {link: '/farmer', page_name: 'farmer'}
        ]
    };
    // get the harvests before rendering
    pool.query(
        get_harvests_query,
        function(err, result){
            // on return:
                // push results into content
                // convert the dates to DateStrings for js
                // render farmer-view-planted-rows
            content.harvests = result;
                    // for (r in content.crop_rows) {
                    //     console.log(content.crop_rows[r]);
                    // }
            for (i in content.harvests) {
                var date1 = new Date(content.harvests[i].harvest_date);
                content.harvests[i].harvest_date = Intl.DateTimeFormat('en-US').format(date1);
                var date2 = new Date(content.harvests[i].expiration_date);
                content.harvests[i].expiration_date = Intl.DateTimeFormat('en-US').format(date2);
            }
            res.render('farmer-view-produce-on-hand', content);
        }
    )
}

function func_add_new_crop_type(req, res){
    content = {
        title: 'Rubyfruit Farm – Add Crop Type',
        page_name: 'add new crop type',
        breadcrumbs: [
            {link: '/', page_name: 'home'},
            {link: '/farmer', page_name: 'farmer'}
        ]
    };
    res.render('farmer-add-new-crop-type', content);
}

          /////////////////////
//=======// box packer page //================================//
        /////////////////////

function funcBoxPacker(req, res){
    content = {
        title: 'Rubyfruit Farm – Box Packer',
        page_name: 'box packer',
        breadcrumbs: [
            {link: '/', page_name: 'home'}
        ]
    };
    res.render('boxPacker', content);
}

// Amelia's Pages: include pages that manage box packer & Admin

// ***ADMIN PAGES***

function funcAdmin(req, res){
  content = {
    title: 'Rubyfruit Farm – Administrator',
    page_name: 'admin',
    breadcrumbs: [
        {link: '/', page_name: 'home'}
    ]
  };
  res.render('admin', content);
}

function func_add_cust(req, res){
  content = {
    title: 'Rubyfruit Farm - Customer',
    page_name: 'add new customer',
    breadcrumbs: [
        {link: '/', page_name: 'home'},
        {link: '/admin', page_name: 'admin'}
    ]
  };
  res.render('admin_add_cust', content);
}

function func_updt_cust(req, res){
  content = {
    title: 'Rubyfruit Farm - Customer',
    page_name: 'update customer subscription',
    breadcrumbs: [
        {link: '/', page_name: 'home'},
        {link: '/admin', page_name: 'admin'}
    ]
  };
  res.render('admin_update_cust', content);
}

function func_boxes_view(req, res){
  content = {
    title: 'Rubyfruit Farm - Boxes',
    page_name: 'view and add boxes',
    breadcrumbs: [
        {link: '/', page_name: 'home'},
        {link: '/admin', page_name: 'admin'}
    ]
  };
  res.render('adminBoxView', content);
}



          /////////////////
//=======// SQL Queries //================================//
        /////////////////

const get_crop_types_query = 'SELECT crop_name, crop_id FROM Crop_Types;';
const add_crop_row_query = "INSERT INTO Crop_Rows (`crop_id`, `mature_date`) VALUES (?, ?);";
const get_crop_rows_query = 'SELECT row_id, Crop_Rows.crop_id, mature_date, crop_name FROM Crop_Rows LEFT JOIN Crop_Types ON Crop_Rows.crop_id = Crop_Types.crop_id;';
const add_harvest_query = "INSERT INTO Harvests (`row_id`, `quantity_harvested`, `harvest_date`, `expiration_date`) VALUES (?, ?, ?, ?);";
const get_harvests_query = 'SELECT harvest_id, crop_name, quantity_harvested, harvest_date, expiration_date FROM Harvests LEFT JOIN Crop_Rows ON Harvests.row_id = Crop_Rows.row_id LEFT JOIN Crop_Types ON Crop_Rows.crop_id = Crop_Types.crop_id;';
const add_crop_type_query = "INSERT INTO Crop_Types (`crop_name`) VALUES (?);"



          /////////////////////////////
//=======// Database AJAX Functions //================================//
        /////////////////////////////

app.post('/INSERT-crop-rows', func_INSERT_crop_rows);
function func_INSERT_crop_rows(req, res, next) {
    var {crop_id, mature_date} = req.body;
    pool.query(
        add_crop_row_query,
        [crop_id, mature_date],
        function(err, result){
            if(err){
                res.type('text/plain');
                res.status(401);
                res.send('401 - bad INSERT');
                console.log(err);
                return;
            }
            // on return, send good response back
            res.type('text/plain');
            res.status(200);
            res.send('200 - good INSERT');
        }
    )
}

app.post('/INSERT-harvests', func_INSERT_harvests);
function func_INSERT_harvests(req, res, next) {
    var {row_id, quantity, harvest_date, expiration_date} = req.body;
    pool.query(
        add_harvest_query,
        [row_id, quantity, harvest_date, expiration_date],
        function(err, result){
            if(err){
                res.type('text/plain');
                res.status(401);
                res.send('401 - bad INSERT');
                console.log(err);
                return;
            }
            // on return, send good response back
            res.type('text/plain');
            res.status(200);
            res.send('200 - good INSERT');
        }
    )
}


app.post('/INSERT-crop-types', func_INSERT_crop_types);
function func_INSERT_crop_types(req, res, next) {
    var {crop_name} = req.body;
    pool.query(
        add_crop_type_query,
        [crop_name],
        function(err, result){
            if(err){
                res.type('text/plain');
                res.status(401);
                res.send('401 - bad INSERT');
                console.log(err);
                return;
            }
            // on return, send good response back
            res.type('text/plain');
            res.status(200);
            res.send('200 - good INSERT');
        }
    )
}

    ////////////
   // errors //
  ////////////

app.use(function(req,res){
  res.type('text/plain');
  res.status(404);
  res.send('404 - Not Found');
});

app.use(function(err, req, res, next){
  console.error(err.stack);
  res.type('plain/text');
  res.status(500);
  res.send('500 - Server Error');
});

//======================================================================//

      //////////////////////////////////////////////////////////////
     // Start listening to port, readout to log what's going on. //
    //////////////////////////////////////////////////////////////

app.listen(app.get('port'), function(){
  console.log('Express started on http://localhost:' + app.get('port') + '; press CMD-. to terminate.')
});

// check one two

// extra comment


//======================================================================//

      ///////////////////////////////////////
     // Working on UPDATE Boxes_Harvests. //
    ///////////////////////////////////////

// updateB_H.js

// TODO: **change "qty" in Harvests into "qty_harvested", & add "qty_left" INT
// TODO: **add "qty_per" INT to Boxes_Harvests
// TODO: **add "num_packed" INT Boxes


function get_next_box_helper(results) {
    var today = new Date();
    var next_box;
    var next_box_date = 0;
    for (r in results) {
        var box_date = new Date(results[r].box_date);
        if (box_date > today) {
            if (box_date < next_box_date || next_box_date == 0) {
                next_box = results[r];
                next_box_date = box_date;
            }
            // console.log(results[r]);
            // return results[r];
        }
    }
    return next_box;
}


function get_next_box() {
    return new Promise(function(resolve, reject) {
        pool.query(
            "SELECT * FROM Boxes",
            function(err, result){
                if (err) reject(err);
                else resolve(get_next_box_helper(result));
            }
        )
    });

}

function get_relevant_harvests(next_box) {
    return new Promise(function(resolve, reject) {
        console.log(next_box);
        var date = new Date(next_box.box_date);
        next_box_date = `'` + date.toISOString().substring(0,10) + `'`;
        console.log(`next box date: ${next_box_date}`);
        pool.query(
            "SELECT * FROM Harvests WHERE expiration_date >= " + next_box_date,
            function(err, result) {
                if (err) reject(err);
                else resolve(result);
            }
        );
    });
}

function get_relevant_customers(relevant_boxes) {
    // console.log(relevant_boxes);
    customer_counts = relevant_boxes.map(box =>
        {return new Promise(function(resolve, reject) {
            pool.query(
                "SELECT Count(*) AS number_of_customers FROM Boxes_Customers WHERE box_id = " + box.box_id + ";",
                function(err, result) {
                    if (err) reject(err);
                    else resolve(result[0]);
                }
            );
        });}
    );
    return Promise.all(customer_counts).then(counts => {return counts})
}

function get_relevant_boxes_with_counts(relevant_harvests) {
    return new Promise(function(resolve, reject) {
        // for (h in relevant_harvests) {}
        console.log(relevant_harvests);
        let harvest = relevant_harvests[1];
        pool.query(
            "SELECT Boxes_Harvests.box_id, box_date FROM Boxes_Harvests LEFT JOIN Boxes ON Boxes_Harvests.box_id = Boxes.box_id WHERE harvest_id = " + harvest.harvest_id + ";",
            function(err, result) {
                if (err) reject(err);
                else {
                    count = get_relevant_customers(result);
                    count.then(value => {
                        for (r in result) {
                            result[r].number_of_customers = value[r].number_of_customers;
                        }
                        resolve(result);
                    });
                }
            }
        );
    });
}


function UPDATE_boxes_harvests_ALGORITHM() {
    // next_box = get_next_box().then(value => console.log(value));
    let next_box = get_next_box();
    let relevant_harvests = next_box.then(value => get_relevant_harvests(value));
    let relevant_boxes = relevant_harvests.then(value => get_relevant_boxes_with_counts(value));
    relevant_boxes.then(value => console.log(value));
}

UPDATE_boxes_harvests_ALGORITHM();


function zzz(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}
async function sleep() {
    await zzz(2000);
}

